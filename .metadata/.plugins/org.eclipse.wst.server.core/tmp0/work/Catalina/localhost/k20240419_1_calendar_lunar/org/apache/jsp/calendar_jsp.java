/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.84
 * Generated at: 2024-04-19 06:43:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.tjoeun.myCalendar.SolarToLunar;
import com.tjoeun.myCalendar.LunarDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import com.tjoeun.myCalendar.MyCalendar;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.tjoeun.myCalendar.SolarToLunar");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.tjoeun.myCalendar.MyCalendar");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("com.tjoeun.myCalendar.LunarDate");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>만년 달력</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("	table {\r\n");
      out.write("		border: 0px solid mediumpurple;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	tr {\r\n");
      out.write("		height: 70px;\r\n");
      out.write("		border-width: 0px;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	th {\r\n");
      out.write("		font-size: 22px;\r\n");
      out.write("		width: 100px; \r\n");
      out.write("		border-width: 0px;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	th#title {\r\n");
      out.write("		font-size: 30px; \r\n");
      out.write("		font-family: D2Coding; \r\n");
      out.write("		font-weight: bold; \r\n");
      out.write("		color: tomato; \r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	th#sunday {\r\n");
      out.write("		color: red;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	th#saturday {\r\n");
      out.write("		color: blue;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	td {\r\n");
      out.write("		text-align: right; \r\n");
      out.write("		vertical-align: top;\r\n");
      out.write("		border: 1px solid black;\r\n");
      out.write("		border-radius: 6px;\r\n");
      out.write("		font-weight: bold;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td.sun {\r\n");
      out.write("		color: red;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td.sat {\r\n");
      out.write("		color: blue;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td#beforesun {\r\n");
      out.write("		color: red;\r\n");
      out.write("		font-size: 12px;\r\n");
      out.write("		background-color: lavender;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td.before {\r\n");
      out.write("		font-size: 12px;\r\n");
      out.write("		background-color: lavender;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td#aftersat {\r\n");
      out.write("		color: blue;\r\n");
      out.write("		font-size: 12px;\r\n");
      out.write("		background-color: yellowgreen;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td.after {\r\n");
      out.write("		font-size: 12px;\r\n");
      out.write("		background-color: yellowgreen;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td#choice {\r\n");
      out.write("	 	text-align: center;\r\n");
      out.write("	 	vertical-align: bottom;\r\n");
      out.write("	 	border-width: 0px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td.holiday {\r\n");
      out.write("	 	color : white;\r\n");
      out.write("	 	background-color:tomato;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	span {\r\n");
      out.write("		font-size: 12px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	a {\r\n");
      out.write("		color: black;\r\n");
      out.write("		text-decoration: none; \r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	a:hover {\r\n");
      out.write("		color: hotpink;\r\n");
      out.write("		text-decoration: underline;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	a:active {\r\n");
      out.write("		color: yellowgreen;\r\n");
      out.write("		text-decoration: none;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.button {\r\n");
      out.write("		background-color: #04AA6D; \r\n");
      out.write("		border: none;\r\n");
      out.write("		color: white;\r\n");
      out.write("		padding: 10px;\r\n");
      out.write("		text-align: center;\r\n");
      out.write("		text-decoration: none;\r\n");
      out.write("		display: inline-block;\r\n");
      out.write("		font-size: 16px;\r\n");
      out.write("		margin: 4px 2px;\r\n");
      out.write("		transition-duration: 0.4s;\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("		border-radius:14px;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.button1 {\r\n");
      out.write("		background-color: white; \r\n");
      out.write("		color: black; \r\n");
      out.write("		border: 2px solid #04AA6D;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.button1:hover {\r\n");
      out.write("		background-color: #04AA6D;\r\n");
      out.write("		color: white;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.button2 {\r\n");
      out.write("		background-color: white; \r\n");
      out.write("		color: black; \r\n");
      out.write("		border: 2px solid #008CBA;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.button2:hover {\r\n");
      out.write("		background-color: #008CBA;\r\n");
      out.write("		color: white;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.select { \r\n");
      out.write("		width: 100px;\r\n");
      out.write("		height: 30px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	fieldset {\r\n");
      out.write("		width: 105px;\r\n");
      out.write("		display: inline;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

	Calendar calendar = Calendar.getInstance();
	int year = calendar.get(Calendar.YEAR);
	int month = calendar.get(Calendar.MONTH) + 1;
	
	try {
		year = Integer.parseInt(request.getParameter("year"));
		month = Integer.parseInt(request.getParameter("month"));
		
		if (month >= 13) {
			year++;
			month = 1;
		} else if (month <= 0) {
			year--;
			month = 12;
		}
	} catch (NumberFormatException e) {
		
	}
	
//	달력을 출력할 달의 양력/음력 대응 결과를 얻어온다.
	ArrayList<LunarDate> lunarDate = SolarToLunar.solarToLunar(year, month); 

      out.write("\r\n");
      out.write("\r\n");
      out.write("<table width=\"700\" border=\"1\" align=\"center\" cellpadding=\"5\" cellspacing=\"0\">\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th>\r\n");
      out.write("			<input class=\"button button1\" type=\"button\" value=\"이전달\" onclick=\"location.href='?year=");
      out.print(year);
      out.write("&month=");
      out.print(month - 1);
      out.write("'\">\r\n");
      out.write("		</th>\r\n");
      out.write("		<th id=\"title\" colspan=\"5\">\r\n");
      out.write("			");
      out.print(year);
      out.write('년');
      out.write(' ');
      out.print(month);
      out.write("월\r\n");
      out.write("		</th>\r\n");
      out.write("		<th>\r\n");
      out.write("			<button class=\"button button2\" type=\"button\" onclick=\"location.href='?year=");
      out.print(year);
      out.write("&month=");
      out.print(month + 1);
      out.write("'\">다음달</button>\r\n");
      out.write("		</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th id=\"sunday\">일</th>\r\n");
      out.write("		<th>월</th>\r\n");
      out.write("		<th>화</th>\r\n");
      out.write("		<th>수</th>\r\n");
      out.write("		<th>목</th>\r\n");
      out.write("		<th>금</th>\r\n");
      out.write("		<th id=\"saturday\">토</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	<!--  -->\r\n");
      out.write("	<tr>\r\n");

int week = MyCalendar.weekDay(year, month, 1);

	int start = 0;
	if (month == 1) {
		start = 31 - week;
	} else {
		start = MyCalendar.lastDay(year, month - 1) - week; // 2 ~ 12월
	}

	for (int i = 0; i<week; i++) {
		if (i == 0) {
	out.println("<td id='beforesun'>" + (month == 1 ? 12 : month - 1) + "/" + ++start + "</td>");
		} else {
	out.println("<td class='before'>" + (month == 1 ? 12 : month - 1) + "/" + ++start + "</td>");
		}
	}

	for (int i = 1; i<=MyCalendar.lastDay(year, month); i++) {
		
//	공휴일인가 판단해서 class 속성을 다르게 지정해서 날짜를 출력한다.
	if (lunarDate.get(i - 1).getHoliday().length() > 0) { // 공휴일인가?
			out.println("<td class='holiday'>" + i + lunarDate.get(i - 1).getHoliday() + "</td>");
		
	} else { // 공휴일을 제외한 나머지 날짜
		switch (MyCalendar.weekDay(year, month, i)) {
			case 0:
				out.println("<td class='sun'>" + i + "</td>");
				break;
			case 6:
				out.println("<td class='sat'>" + i + "</td>");
				break;
			default:
				out.println("<td>" + i + "</td>");
				break;
		}
	}
		// 출력한 날짜가 토요일이고 그 달의 마지막 날짜가 아니면 줄을 바꾼다.
		if (MyCalendar.weekDay(year, month, i) == 6 && i != MyCalendar.lastDay(year, month)) {
			out.println("</tr><tr>");
		}
	}

	//	날짜를 다 출력하고 남은 빈 칸에 다음달 날짜를 출력한다.
	int last = MyCalendar.weekDay(year, month, MyCalendar.lastDay(year, month));
	for (int i = 1; i <= 6 - last; i++) {
		if (i == 6 - last) {
	out.println("<td id='aftersat'>" + (month == 12 ? 1 : month + 1) + "/" + i + "</td>");
		} else {
	out.println("<td class='after'>" + (month == 12 ? 1 : month + 1) + "/" + i + "</td>");
		}
	}

      out.write("\r\n");
      out.write("	</tr>\r\n");
      out.write("	<!-- 년, 월을 선택하고 보기 버튼을 클릭하면 선택된 달의 달력으로 한번에 넘어가게 한다. -->\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td id=\"choice\" colspan=\"7\">\r\n");
      out.write("			<form action=\"?\" method=\"post\">\r\n");
      out.write("			<fieldset>\r\n");
      out.write("				<legend>년</legend>\r\n");
      out.write("					<select class=\"select\" name=\"year\">\r\n");

	for (int i = 1900; i <= 2100;i++) {
		if (calendar.get(Calendar.YEAR) == i) {
			out.println("<option selected='selected'>" + i + "</option>");						
			
		} else {
			out.println("<option>" + i + "</option>");						
		}
	}

      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("			</fieldset>\r\n");
      out.write("			<fieldset>\r\n");
      out.write("				<legend>월</legend>\r\n");
      out.write("					<select class=\"select\" name=\"month\">\r\n");

	for (int i = 1; i <= 12;i++) {
		if (calendar.get(Calendar.MONTH) + 1 == i) {
			out.println("<option selected='selected'>" + i + "</option>");						
		} else {
			out.println("<option>" + i + "</option>");
		}
	}

      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("			</fieldset>\r\n");
      out.write("				<input class=\"select\" type=\"submit\" value=\"보기\">\r\n");
      out.write("			</form>\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
